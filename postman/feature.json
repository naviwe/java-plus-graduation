{
	"info": {
		"_postman_id": "7632a93c-0ce9-4ff4-bb4d-c4fa1b458de3",
		"name": "Test Explore With Me - Feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39340463"
	},
	"item": [
		{
			"name": "Validation",
			"item": [
				{
					"name": "Добавление нового комментария без заголовка",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eventId\", event.id);\r",
									"\r",
									"        const comment = {\r",
									"            text: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
									"        };\r",
									"\r",
									"        if (comment.text.length < 20) {\r",
									"            comment.text = comment.text.padEnd(20, ' ');\r",
									"        } else if (comment.text.length > 2000) {\r",
									"            comment.text = comment.text.substring(0, 2000);\r",
									"        }\r",
									"\r",
									"        pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify(comment),\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"        throw err;\r",
									"    }\r",
									"};\r",
									"\r",
									"main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Запрос без заголовка X-Sharer-Event-Id должен вернуть ошибку 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    const response = pm.response.json();\r",
									"    console.log(\"Ответ сервера:\", response);\r",
									"\r",
									"    pm.expect(response).to.have.property('error');\r",
									"    pm.expect(response.error).to.equal('Bad Request', 'Сообщение об ошибке должно быть \"Bad Request\"');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Добавление нового комментария несуществующего пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const nonExistentUserId = user.id + 1;\r",
									"        pm.collectionVariables.set(\"uid\", nonExistentUserId);\r",
									"\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eventId\", event.id);\r",
									"\r",
									"        const comment = {\r",
									"            text: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
									"        };\r",
									"\r",
									"        if (comment.text.length < 20) {\r",
									"            comment.text = comment.text.padEnd(20, ' ');\r",
									"        } else if (comment.text.length > 2000) {\r",
									"            comment.text = comment.text.substring(0, 2000);\r",
									"        }\r",
									"\r",
									"        pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify(comment),\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"        throw err;\r",
									"    }\r",
									"};\r",
									"\r",
									"main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Запрос от несуществующего пользователя должен вернуть ошибку 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"\r",
									"    const response = pm.response.json();\r",
									"    console.log(\"Ответ сервера:\", response);\r",
									"\r",
									"    pm.expect(response).to.have.property('status');\r",
									"    pm.expect(response).to.have.property('reason');\r",
									"    pm.expect(response).to.have.property('message');\r",
									"    pm.expect(response).to.have.property('timestamp');\r",
									"\r",
									"    pm.expect(response.status).to.equal('NOT_FOUND', 'Статус должен быть NOT_FOUND');\r",
									"    pm.expect(response.reason).to.equal('The required object was not found.', 'Причина должна быть \"The required object was not found.\"');\r",
									"    pm.expect(response.message).to.include('User with id', 'Сообщение об ошибке должно указывать на отсутствие пользователя');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "X-Sharer-User-Id",
								"value": "{{uid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Добавление нового комментария несуществующему ивенту",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        const nonExistentEventId = event.id + 1;\r",
									"        pm.collectionVariables.set(\"eventId\", nonExistentEventId);\r",
									"\r",
									"        const comment = {\r",
									"            text: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
									"        };\r",
									"\r",
									"        if (comment.text.length < 20) {\r",
									"            comment.text = comment.text.padEnd(20, ' ');\r",
									"        } else if (comment.text.length > 2000) {\r",
									"            comment.text = comment.text.substring(0, 2000);\r",
									"        }\r",
									"\r",
									"        pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify(comment),\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"        throw err;\r",
									"    }\r",
									"};\r",
									"\r",
									"main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Попытка прокомментировать несуществующее событие должна вернуть ошибку 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"\r",
									"    const response = pm.response.json();\r",
									"    console.log(\"Ответ сервера:\", response);\r",
									"\r",
									"    pm.expect(response).to.have.property('status');\r",
									"    pm.expect(response).to.have.property('reason');\r",
									"    pm.expect(response).to.have.property('message');\r",
									"    pm.expect(response).to.have.property('timestamp');\r",
									"\r",
									"    pm.expect(response.status).to.equal('NOT_FOUND', 'Статус должен быть NOT_FOUND');\r",
									"    pm.expect(response.reason).to.equal('The required object was not found.', 'Причина должна быть \"The required object was not found.\"');\r",
									"    pm.expect(response.message).to.include('Event with id', 'Сообщение об ошибке должно указывать на отсутствие события');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "X-Sharer-User-Id",
								"value": "{{uid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Добавление нового комментария с текстом меньше 20 символов",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eventId\", event.id);\r",
									"\r",
									"        const comment = {\r",
									"            text: \"text with 19symbols\",\r",
									"        };\r",
									"\r",
									"        pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify(comment),\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"        throw err;\r",
									"    }\r",
									"};\r",
									"\r",
									"main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Запрос с текстом короче 20 символов должен вернуть ошибку 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    const response = pm.response.json();\r",
									"    console.log(\"Ответ сервера:\", response);\r",
									"\r",
									"    pm.expect(response).to.have.property('status');\r",
									"    pm.expect(response).to.have.property('reason');\r",
									"    pm.expect(response).to.have.property('message');\r",
									"    pm.expect(response).to.have.property('timestamp');\r",
									"\r",
									"    pm.expect(response.status).to.equal('BAD_REQUEST', 'Статус должен быть BAD_REQUEST');\r",
									"    pm.expect(response.reason).to.equal('Incorrectly made request.', 'Причина должна быть \"Incorrectly made request.\"');\r",
									"    pm.expect(response.message).to.include('size must be between 20 and 2000', 'Сообщение об ошибке должно указывать на нарушение ограничения длины текста');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Добавление нового комментария с текстом больше 2000 символов",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eventId\", event.id);\r",
									"\r",
									"        const longText = \"A\".repeat(2001);\r",
									"\r",
									"        const comment = {\r",
									"            text: longText,\r",
									"        };\r",
									"\r",
									"        pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify(comment),\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"        throw err;\r",
									"    }\r",
									"};\r",
									"\r",
									"main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Запрос с текстом длиннее 2000 символов должен вернуть ошибку 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    const response = pm.response.json();\r",
									"    console.log(\"Ответ сервера:\", response);\r",
									"\r",
									"    pm.expect(response).to.have.property('status');\r",
									"    pm.expect(response).to.have.property('reason');\r",
									"    pm.expect(response).to.have.property('message');\r",
									"    pm.expect(response).to.have.property('timestamp');\r",
									"\r",
									"    pm.expect(response.status).to.equal('BAD_REQUEST', 'Статус должен быть BAD_REQUEST');\r",
									"    pm.expect(response.reason).to.equal('Incorrectly made request.', 'Причина должна быть \"Incorrectly made request.\"');\r",
									"    pm.expect(response.message).to.include('size must be between 20 and 2000', 'Сообщение об ошибке должно указывать на нарушение ограничения длины текста');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "X-Sharer-User-Id",
								"value": "{{uid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Добавление нового комментария с текстом только из пробелов",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eventId\", event.id);\r",
									"\r",
									"        const longText = \" \".repeat(30);\r",
									"\r",
									"        const comment = {\r",
									"            text: longText,\r",
									"        };\r",
									"\r",
									"        pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify(comment),\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"        throw err;\r",
									"    }\r",
									"};\r",
									"\r",
									"main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Запрос с текстом только из пробелов должен вернуть ошибку 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    const response = pm.response.json();\r",
									"    console.log(\"Ответ сервера:\", response);\r",
									"\r",
									"    pm.expect(response).to.have.property('status');\r",
									"    pm.expect(response).to.have.property('reason');\r",
									"    pm.expect(response).to.have.property('message');\r",
									"    pm.expect(response).to.have.property('timestamp');\r",
									"\r",
									"    pm.expect(response.status).to.equal('BAD_REQUEST', 'Статус должен быть BAD_REQUEST');\r",
									"    pm.expect(response.reason).to.equal('Incorrectly made request.', 'Причина должна быть \"Incorrectly made request.\"');\r",
									"    pm.expect(response.message).to.include('must not be blank', 'Сообщение об ошибке должно указывать что строка не может быть пустой');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "X-Sharer-User-Id",
								"value": "{{uid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Добавление нового комментария с null полем text",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eventId\", event.id);\r",
									"\r",
									"        const text = null;\r",
									"\r",
									"        const comment = {\r",
									"            text: text,\r",
									"        };\r",
									"\r",
									"        pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify(comment),\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"        throw err;\r",
									"    }\r",
									"};\r",
									"\r",
									"main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Запрос с текстом равным null должен вернуть ошибку 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"    const response = pm.response.json();\r",
									"    console.log(\"Ответ сервера:\", response);\r",
									"\r",
									"    pm.expect(response).to.have.property('status');\r",
									"    pm.expect(response).to.have.property('reason');\r",
									"    pm.expect(response).to.have.property('message');\r",
									"    pm.expect(response).to.have.property('timestamp');\r",
									"\r",
									"    pm.expect(response.status).to.equal('BAD_REQUEST', 'Статус должен быть BAD_REQUEST');\r",
									"    pm.expect(response.reason).to.equal('Incorrectly made request.', 'Причина должна быть \"Incorrectly made request.\"');\r",
									"    pm.expect(response.message).to.include('must not be blank', 'Сообщение об ошибке должно указывать что строка не может быть null');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "X-Sharer-User-Id",
								"value": "{{uid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Изменение чужого комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user2.id);\r",
									"\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user1.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eventId\", event.id);\r",
									"\r",
									"        const comment = await api.addComment(user1.id,rnd.getComment(),event.id);\r",
									"        pm.collectionVariables.set(\"commentId\",comment.id);\r",
									"    \r",
									"\r",
									"        pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify(rnd.getComment()),\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"        throw err;\r",
									"    }\r",
									"};\r",
									"\r",
									"main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Запрос по изменению чужого комментария должен вернуть ошибку\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"\r",
									"    const response = pm.response.json();\r",
									"    console.log(\"Ответ сервера:\", response);\r",
									"\r",
									"    pm.expect(response).to.have.property('status');\r",
									"    pm.expect(response).to.have.property('reason');\r",
									"    pm.expect(response).to.have.property('message');\r",
									"    pm.expect(response).to.have.property('timestamp');\r",
									"\r",
									"    pm.expect(response.status).to.equal('FORBIDDEN', 'Статус должен быть FORBIDDEN');\r",
									"    pm.expect(response.reason).to.equal('For the requested operation the conditions are not met.', 'Причина должна быть \"For the requested operation the conditions are not met.\"');\r",
									"    pm.expect(response.message).to.include('is not author of comment', 'Сообщение об ошибке должно указывать на нарушение ограничения на редактирования комментария владельцем');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Sharer-User-Id",
								"value": "{{uid}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events/:eventId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								":eventId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eventId}}"
								},
								{
									"key": "commentId",
									"value": "{{commentId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Добавление нового комментария",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        pm.collectionVariables.set(\"eventId\", event.id);\r",
							"\r",
							"        const comment = {\r",
							"            text: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
							"        };\r",
							"\r",
							"        if (comment.text.length < 20) {\r",
							"            comment.text = comment.text.padEnd(20, ' ');\r",
							"        } else if (comment.text.length > 2000) {\r",
							"            comment.text = comment.text.substring(0, 2000);\r",
							"        }\r",
							"\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(comment),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"        throw err;\r",
							"    }\r",
							"};\r",
							"\r",
							"main();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, event, author, timestamp, updated\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('text');\r",
							"    pm.expect(target).to.have.property('event');\r",
							"    pm.expect(target).to.have.property('author');\r",
							"    pm.expect(target).to.have.property('timestamp');\r",
							"    pm.expect(target).to.have.property('updated');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.text).to.equal(source.text, 'Комментарий пользователя должен соответствовать комментарию пользователя в запросе');\r",
							"    pm.expect(target.event).to.equal(parseInt(pm.collectionVariables.get(\"eventId\")), 'ID события в ответе должен соответствовать переданному eventId');\r",
							"    pm.expect(target.author).to.equal(parseInt(pm.collectionVariables.get(\"uid\")), 'ID автора в ответе должен соответствовать переданному userId');\r",
							"\r",
							"    const moment = require('moment');\r",
							"    const createdDate = moment(target.timestamp, 'YYYY-MM-DD HH:mm:ss', true).subtract(3, 'hours');\r",
							"    pm.expect(createdDate.isValid()).to.equal(true, 'Поле timestamp должно быть валидной датой в формате YYYY-MM-DD HH:mm:ss');\r",
							"    pm.expect(target.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/, 'Поле timestamp должно быть в формате YYYY-MM-DD HH:mm:ss');\r",
							"\r",
							"    const now = moment()\r",
							"    const diff = now.diff(createdDate, 'seconds');\r",
							"    pm.expect(Math.abs(diff)).to.be.below(30, 'Дата создания должна быть близка к текущему времени');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "X-Sharer-User-Id",
						"value": "{{uid}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/:eventId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					]
				},
				"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
			},
			"response": []
		},
		{
			"name": "Получение комментария по id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm); \r",
							"    const rnd = new RandomUtils();\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        pm.collectionVariables.set(\"eventId\", event.id);\r",
							"\r",
							"        const comment = {\r",
							"            text: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
							"        };\r",
							"\r",
							"        if (comment.text.length < 20) {\r",
							"            comment.text = comment.text.padEnd(20, \" \");\r",
							"        } else if (comment.text.length > 2000) {\r",
							"            comment.text = comment.text.substring(0, 2000);\r",
							"        }\r",
							"\r",
							"        const createdComment = await api.addComment(user.id, comment, event.id);\r",
							"        pm.collectionVariables.set(\"commentId\", createdComment.id);\r",
							"        pm.collectionVariables.set(\"savedComment\", JSON.stringify(createdComment));\r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных: \", err);\r",
							"        throw err;\r",
							"    }\r",
							"};\r",
							"main();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.collectionVariables.get(\"savedComment\"));\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, event, author, timestamp, updated\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('text');\r",
							"    pm.expect(target).to.have.property('event');\r",
							"    pm.expect(target).to.have.property('author');\r",
							"    pm.expect(target).to.have.property('timestamp');\r",
							"    pm.expect(target).to.have.property('updated');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.text).to.equal(source.text, 'Комментарий пользователя должен соответствовать комментарию пользователя в запросе');\r",
							"    pm.expect(target.event).to.equal(parseInt(pm.collectionVariables.get(\"eventId\")), 'ID события в ответе должен соответствовать переданному eventId');\r",
							"    pm.expect(target.author).to.equal(parseInt(pm.collectionVariables.get(\"uid\")), 'ID автора в ответе должен соответствовать переданному userId');\r",
							"\r",
							"    const moment = require('moment');\r",
							"    const createdDate = moment(target.timestamp, 'YYYY-MM-DD HH:mm:ss', true).subtract(3, 'hours');\r",
							"    pm.expect(createdDate.isValid()).to.equal(true, 'Поле timestamp должно быть валидной датой в формате YYYY-MM-DD HH:mm:ss');\r",
							"    pm.expect(target.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/, 'Поле timestamp должно быть в формате YYYY-MM-DD HH:mm:ss');\r",
							"\r",
							"    const now = moment();\r",
							"    const diff = now.diff(createdDate, 'seconds');\r",
							"    pm.expect(Math.abs(diff)).to.be.below(30, 'Дата создания должна быть близка к текущему времени');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/:eventId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":eventId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						},
						{
							"key": "commentId",
							"value": "{{commentId}}"
						}
					]
				},
				"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
			},
			"response": []
		},
		{
			"name": "Получение комментариев по id события",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm); \r",
							"    const rnd = new RandomUtils();\r",
							"    try {\r",
							"        pm.collectionVariables.set(\"size\", 3);\r",
							"\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        pm.collectionVariables.set(\"eventId\", event.id);\r",
							"\r",
							"        const createdComments = [];\r",
							"        const numberOfComments = pm.collectionVariables.get(\"size\") + 1;\r",
							"\r",
							"        for (let i = 0; i < numberOfComments; i++) {\r",
							"            const comment = {\r",
							"                text: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
							"            };\r",
							"            if (comment.text.length < 20) {\r",
							"                comment.text = comment.text.padEnd(20, \" \");\r",
							"            } else if (comment.text.length > 2000) {\r",
							"                comment.text = comment.text.substring(0, 2000);\r",
							"            }\r",
							"            const createdComment = await api.addComment(user.id, comment, event.id);\r",
							"            createdComments.push(createdComment);\r",
							"        }\r",
							"        \r",
							"        pm.collectionVariables.set(\"createdComments\", JSON.stringify(createdComments));\r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных: \", err);\r",
							"        throw err;\r",
							"    }\r",
							"};\r",
							"main();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"const createdComments = JSON.parse(pm.collectionVariables.get(\"createdComments\"));\r",
							"const size = parseInt(pm.collectionVariables.get(\"size\"));\r",
							"\r",
							"pm.test(\"Ответ должен быть массивом комментариев\", function () {\r",
							"    pm.expect(Array.isArray(response)).to.be.true;\r",
							"    pm.expect(response.length).to.equal(size, \r",
							"        `Количество комментариев в ответе должно быть равно size=${size}`);\r",
							"});\r",
							"\r",
							"pm.test(\"Каждый комментарий должен содержать обязательные поля\", function () {\r",
							"    response.forEach(comment => {\r",
							"        pm.expect(comment).to.have.property('id');\r",
							"        pm.expect(comment).to.have.property('text');\r",
							"        pm.expect(comment).to.have.property('event');\r",
							"        pm.expect(comment).to.have.property('author');\r",
							"        pm.expect(comment).to.have.property('timestamp');\r",
							"        pm.expect(comment).to.have.property('updated');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать созданным комментариям\", function () {\r",
							"    const eventId = parseInt(pm.collectionVariables.get(\"eventId\"));\r",
							"    const userId = parseInt(pm.collectionVariables.get(\"uid\"));\r",
							"    \r",
							"    response.forEach(comment => {\r",
							"        const matchingComment = createdComments.find(created => created.id === comment.id);\r",
							"        pm.expect(matchingComment).to.exist;\r",
							"        pm.expect(comment.text).to.equal(matchingComment.text,\r",
							"            'Текст комментария должен соответствовать созданному');\r",
							"        pm.expect(comment.event).to.equal(eventId,\r",
							"            'ID события должен соответствовать созданному событию');\r",
							"        pm.expect(comment.author).to.equal(userId,\r",
							"            'ID автора должен соответствовать ID пользователя');\r",
							"\r",
							"        const moment = require('moment');\r",
							"        const createdDate = moment(comment.timestamp, 'YYYY-MM-DD HH:mm:ss', true).subtract(3, 'hours');\r",
							"        pm.expect(createdDate.isValid()).to.equal(true,\r",
							"            'Поле timestamp должно быть валидной датой');\r",
							"        pm.expect(comment.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/,\r",
							"            'Поле timestamp должно быть в формате YYYY-MM-DD HH:mm:ss');\r",
							"\r",
							"        const now = moment();\r",
							"        const diff = now.diff(createdDate, 'seconds');\r",
							"        pm.expect(Math.abs(diff)).to.be.below(30,\r",
							"            'Дата создания должна быть близка к текущему времени');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Пагинация работает корректно\", function () {\r",
							"    pm.expect(response.length).to.be.at.most(size,\r",
							"        `Размер ответа не должен превышать указанный size=${size}`);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/:eventId/comments?from={{from}}&size={{size}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":eventId",
						"comments"
					],
					"query": [
						{
							"key": "from",
							"value": "{{from}}"
						},
						{
							"key": "size",
							"value": "{{size}}"
						}
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					]
				},
				"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
			},
			"response": []
		},
		{
			"name": "Получение комментариев по id события без параметров запроса",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm); \r",
							"    const rnd = new RandomUtils();\r",
							"    try {\r",
							"        pm.collectionVariables.set(\"size\", 10);\r",
							"        \r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        pm.collectionVariables.set(\"eventId\", event.id);\r",
							"\r",
							"        const createdComments = [];\r",
							"        const numberOfComments = pm.collectionVariables.get(\"size\") + 1;\r",
							"\r",
							"        for (let i = 0; i < numberOfComments; i++) {\r",
							"            const comment = {\r",
							"                text: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
							"            };\r",
							"            if (comment.text.length < 20) {\r",
							"                comment.text = comment.text.padEnd(20, \" \");\r",
							"            } else if (comment.text.length > 2000) {\r",
							"                comment.text = comment.text.substring(0, 2000);\r",
							"            }\r",
							"            const createdComment = await api.addComment(user.id, comment, event.id);\r",
							"            createdComments.push(createdComment);\r",
							"        }\r",
							"        \r",
							"        pm.collectionVariables.set(\"createdComments\", JSON.stringify(createdComments));\r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных: \", err);\r",
							"        throw err;\r",
							"    }\r",
							"};\r",
							"main();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"const createdComments = JSON.parse(pm.collectionVariables.get(\"createdComments\"));\r",
							"const size = parseInt(pm.collectionVariables.get(\"size\"));\r",
							"\r",
							"pm.test(\"Ответ должен быть массивом комментариев\", function () {\r",
							"    pm.expect(Array.isArray(response)).to.be.true;\r",
							"    pm.expect(response.length).to.equal(size, \r",
							"        `Количество комментариев в ответе должно быть равно size=${size}`);\r",
							"});\r",
							"\r",
							"pm.test(\"Каждый комментарий должен содержать обязательные поля\", function () {\r",
							"    response.forEach(comment => {\r",
							"        pm.expect(comment).to.have.property('id');\r",
							"        pm.expect(comment).to.have.property('text');\r",
							"        pm.expect(comment).to.have.property('event');\r",
							"        pm.expect(comment).to.have.property('author');\r",
							"        pm.expect(comment).to.have.property('timestamp');\r",
							"        pm.expect(comment).to.have.property('updated');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать созданным комментариям\", function () {\r",
							"    const eventId = parseInt(pm.collectionVariables.get(\"eventId\"));\r",
							"    const userId = parseInt(pm.collectionVariables.get(\"uid\"));\r",
							"    \r",
							"    response.forEach(comment => {\r",
							"        const matchingComment = createdComments.find(created => created.id === comment.id);\r",
							"        pm.expect(matchingComment).to.exist;\r",
							"        pm.expect(comment.text).to.equal(matchingComment.text,\r",
							"            'Текст комментария должен соответствовать созданному');\r",
							"        pm.expect(comment.event).to.equal(eventId,\r",
							"            'ID события должен соответствовать созданному событию');\r",
							"        pm.expect(comment.author).to.equal(userId,\r",
							"            'ID автора должен соответствовать ID пользователя');\r",
							"\r",
							"        const moment = require('moment');\r",
							"        const createdDate = moment(comment.timestamp, 'YYYY-MM-DD HH:mm:ss', true).subtract(3, 'hours');\r",
							"        pm.expect(createdDate.isValid()).to.equal(true,\r",
							"            'Поле timestamp должно быть валидной датой');\r",
							"        pm.expect(comment.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/,\r",
							"            'Поле timestamp должно быть в формате YYYY-MM-DD HH:mm:ss');\r",
							"\r",
							"        const now = moment();\r",
							"        const diff = now.diff(createdDate, 'seconds');\r",
							"        pm.expect(Math.abs(diff)).to.be.below(30,\r",
							"            'Дата создания должна быть близка к текущему времени');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Пагинация работает корректно\", function () {\r",
							"    pm.expect(response.length).to.be.at.most(size,\r",
							"        `Размер ответа не должен превышать указанный size=${size}`);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/:eventId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					]
				},
				"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
			},
			"response": []
		},
		{
			"name": "Изменение комментария пользователем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        pm.collectionVariables.set(\"eventId\", event.id);\r",
							"\r",
							"        const comment = await api.addComment(user.id,rnd.getComment(),event.id);\r",
							"        pm.collectionVariables.set(\"commentId\",comment.id);\r",
							"    \r",
							"\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(rnd.getComment()),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"        throw err;\r",
							"    }\r",
							"};\r",
							"\r",
							"main();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, event, author, timestamp, updated\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('text');\r",
							"    pm.expect(target).to.have.property('event');\r",
							"    pm.expect(target).to.have.property('author');\r",
							"    pm.expect(target).to.have.property('timestamp');\r",
							"    pm.expect(target).to.have.property('updated');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.text).to.equal(source.text, 'Комментарий пользователя должен соответствовать комментарию пользователя в запросе');\r",
							"    pm.expect(target.event).to.equal(parseInt(pm.collectionVariables.get(\"eventId\")), 'ID события в ответе должен соответствовать переданному eventId');\r",
							"    pm.expect(target.author).to.equal(parseInt(pm.collectionVariables.get(\"uid\")), 'ID автора в ответе должен соответствовать переданному userId');\r",
							"\r",
							"    const moment = require('moment');\r",
							"    const createdDate = moment(target.timestamp, 'YYYY-MM-DD HH:mm:ss', true).subtract(3, 'hours');\r",
							"    pm.expect(createdDate.isValid()).to.equal(true, 'Поле timestamp должно быть валидной датой в формате YYYY-MM-DD HH:mm:ss');\r",
							"    pm.expect(target.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/, 'Поле timestamp должно быть в формате YYYY-MM-DD HH:mm:ss');\r",
							"\r",
							"    const now = moment();\r",
							"    const diff = now.diff(createdDate, 'seconds');\r",
							"    pm.expect(Math.abs(diff)).to.be.below(30, 'Дата создания должна быть близка к текущему времени');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "X-Sharer-User-Id",
						"value": "{{uid}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/:eventId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":eventId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						},
						{
							"key": "commentId",
							"value": "{{commentId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение комментария админом",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        pm.collectionVariables.set(\"eventId\", event.id);\r",
							"\r",
							"        const comment = await api.addComment(user.id,rnd.getComment(),event.id);\r",
							"        pm.collectionVariables.set(\"commentId\",comment.id);\r",
							"    \r",
							"\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(rnd.getComment()),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"        throw err;\r",
							"    }\r",
							"};\r",
							"\r",
							"main();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, event, author, timestamp, updated\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('text');\r",
							"    pm.expect(target).to.have.property('event');\r",
							"    pm.expect(target).to.have.property('author');\r",
							"    pm.expect(target).to.have.property('timestamp');\r",
							"    pm.expect(target).to.have.property('updated');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.text).to.equal(source.text, 'Комментарий пользователя должен соответствовать комментарию пользователя в запросе');\r",
							"    pm.expect(target.event).to.equal(parseInt(pm.collectionVariables.get(\"eventId\")), 'ID события в ответе должен соответствовать переданному eventId');\r",
							"    pm.expect(target.author).to.equal(parseInt(pm.collectionVariables.get(\"uid\")), 'ID автора в ответе должен соответствовать переданному userId');\r",
							"\r",
							"    const moment = require('moment');\r",
							"    const createdDate = moment(target.timestamp, 'YYYY-MM-DD HH:mm:ss', true).subtract(3, 'hours');\r",
							"    pm.expect(createdDate.isValid()).to.equal(true, 'Поле timestamp должно быть валидной датой в формате YYYY-MM-DD HH:mm:ss');\r",
							"    pm.expect(target.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/, 'Поле timestamp должно быть в формате YYYY-MM-DD HH:mm:ss');\r",
							"\r",
							"    const now = moment();\r",
							"    const diff = now.diff(createdDate, 'seconds');\r",
							"    pm.expect(Math.abs(diff)).to.be.below(30, 'Дата создания должна быть близка к текущему времени');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "{{commentId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария пользователем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        pm.collectionVariables.set(\"eventId\", event.id);\r",
							"\r",
							"        const comment = await api.addComment(user.id,rnd.getComment(),event.id);\r",
							"        pm.collectionVariables.set(\"commentId\",comment.id);\r",
							"\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"        throw err;\r",
							"    }\r",
							"};\r",
							"main();\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);  \r",
							"});\r",
							"\r",
							"pm.test(\"Response has no body\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Sharer-User-Id",
						"value": "{{uid}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/events/:eventId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":eventId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						},
						{
							"key": "commentId",
							"value": "{{commentId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария админом",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"\r",
							"        const comment = await api.addComment(user.id,rnd.getComment(),event.id);\r",
							"        pm.collectionVariables.set(\"commentId\",comment.id);\r",
							"\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"        throw err;\r",
							"    }\r",
							"};\r",
							"main();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);  \r",
							"});\r",
							"\r",
							"pm.test(\"Response has no body\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "{{commentId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async addComment(userId, comment, eventId, verbose = null) {",
					"        const headers = {",
					"            \"Content-Type\": \"application/json\",",
					"            \"X-Sharer-User-Id\": String(userId)",
					"        };",
					"        return this.sendRequest(\"POST\", `/events/${eventId}/comments`, comment, \"Ошибка при добавлении комментария: \", verbose, headers);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body = null, errorText = \"Ошибка при выполнении запроса: \", verbose = null, headers = {}) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            const defaultHeaders = { \"Content-Type\": \"application/json\" };",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { ...defaultHeaders, ...headers }, // Объединяем заголовки",
					"            };",
					"            if (verbose) {",
					"            console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if (error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                            \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" +",
					"                            \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"                    if (verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"                    if (response.stream.length === 0) {",
					"                        reject(new Error('Отправлено пустое тело ответа'));",
					"                    } else {",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"            } catch (err) {",
					"                if (verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
					"        };",
					"    }",
					"",
					"    getComment() {",
					"        ",
					"        const comment = {",
					"            text: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        };",
					"",
					"        if (comment.text.length < 20) {",
					"            comment.text = comment.text.padEnd(20, ' ');",
					"        } else if (comment.text.length > 2000) {",
					"            comment.text = comment.text.substring(0, 2000);",
					"        }",
					"",
					"        return comment;",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": ""
		},
		{
			"key": "confirmedRequests",
			"value": ""
		},
		{
			"key": "responseArr",
			"value": ""
		},
		{
			"key": "source1",
			"value": ""
		},
		{
			"key": "source2",
			"value": ""
		},
		{
			"key": "fromId",
			"value": "0"
		},
		{
			"key": "source",
			"value": ""
		},
		{
			"key": "userName",
			"value": ""
		},
		{
			"key": "eventId",
			"value": ""
		},
		{
			"key": "commentId",
			"value": ""
		},
		{
			"key": "savedComment",
			"value": ""
		},
		{
			"key": "size",
			"value": "",
			"type": "default"
		},
		{
			"key": "from",
			"value": "",
			"type": "default"
		},
		{
			"key": "createdComments",
			"value": ""
		}
	]
}